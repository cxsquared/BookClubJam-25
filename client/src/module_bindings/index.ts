// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.5.0 (commit 0712d3bfbd159367de09efeeeacb54c9d4f0ff61).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { CreateDecor } from "./create_decor_reducer.ts";
export { CreateDecor };
import { DeleteDecor } from "./delete_decor_reducer.ts";
export { DeleteDecor };
import { EnterDoor } from "./enter_door_reducer.ts";
export { EnterDoor };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { LikeDoor } from "./like_door_reducer.ts";
export { LikeDoor };
import { MoveDecor } from "./move_decor_reducer.ts";
export { MoveDecor };
import { OpenPackage } from "./open_package_reducer.ts";
export { OpenPackage };
import { UpdateDecorText } from "./update_decor_text_reducer.ts";
export { UpdateDecorText };

// Import and reexport all table handle types
import { DecorTableHandle } from "./decor_table.ts";
export { DecorTableHandle };
import { DoorTableHandle } from "./door_table.ts";
export { DoorTableHandle };
import { DoorVisitTableHandle } from "./door_visit_table.ts";
export { DoorVisitTableHandle };
import { InteractionTableHandle } from "./interaction_table.ts";
export { InteractionTableHandle };
import { InventoryTableHandle } from "./inventory_table.ts";
export { InventoryTableHandle };
import { PackageTableHandle } from "./package_table.ts";
export { PackageTableHandle };
import { PackageItemTableHandle } from "./package_item_table.ts";
export { PackageItemTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Decor } from "./decor_type.ts";
export { Decor };
import { Door } from "./door_type.ts";
export { Door };
import { DoorVisit } from "./door_visit_type.ts";
export { DoorVisit };
import { Interaction } from "./interaction_type.ts";
export { Interaction };
import { Inventory } from "./inventory_type.ts";
export { Inventory };
import { Package } from "./package_type.ts";
export { Package };
import { PackageItem } from "./package_item_type.ts";
export { PackageItem };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    decor: {
      tableName: "decor",
      rowType: Decor.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Decor.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    door: {
      tableName: "door",
      rowType: Door.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Door.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    door_visit: {
      tableName: "door_visit",
      rowType: DoorVisit.getTypeScriptAlgebraicType(),
    },
    interaction: {
      tableName: "interaction",
      rowType: Interaction.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Interaction.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    inventory: {
      tableName: "inventory",
      rowType: Inventory.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Inventory.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    package: {
      tableName: "package",
      rowType: Package.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Package.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    package_item: {
      tableName: "package_item",
      rowType: PackageItem.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (PackageItem.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    create_decor: {
      reducerName: "create_decor",
      argsType: CreateDecor.getTypeScriptAlgebraicType(),
    },
    delete_decor: {
      reducerName: "delete_decor",
      argsType: DeleteDecor.getTypeScriptAlgebraicType(),
    },
    enter_door: {
      reducerName: "enter_door",
      argsType: EnterDoor.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    like_door: {
      reducerName: "like_door",
      argsType: LikeDoor.getTypeScriptAlgebraicType(),
    },
    move_decor: {
      reducerName: "move_decor",
      argsType: MoveDecor.getTypeScriptAlgebraicType(),
    },
    open_package: {
      reducerName: "open_package",
      argsType: OpenPackage.getTypeScriptAlgebraicType(),
    },
    update_decor_text: {
      reducerName: "update_decor_text",
      argsType: UpdateDecorText.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.5.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CreateDecor", args: CreateDecor }
| { name: "DeleteDecor", args: DeleteDecor }
| { name: "EnterDoor", args: EnterDoor }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "LikeDoor", args: LikeDoor }
| { name: "MoveDecor", args: MoveDecor }
| { name: "OpenPackage", args: OpenPackage }
| { name: "UpdateDecorText", args: UpdateDecorText }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  createDecor(inventoryId: bigint, x: number, y: number) {
    const __args = { inventoryId, x, y };
    let __writer = new __BinaryWriter(1024);
    CreateDecor.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_decor", __argsBuffer, this.setCallReducerFlags.createDecorFlags);
  }

  onCreateDecor(callback: (ctx: ReducerEventContext, inventoryId: bigint, x: number, y: number) => void) {
    this.connection.onReducer("create_decor", callback);
  }

  removeOnCreateDecor(callback: (ctx: ReducerEventContext, inventoryId: bigint, x: number, y: number) => void) {
    this.connection.offReducer("create_decor", callback);
  }

  deleteDecor(decorId: bigint) {
    const __args = { decorId };
    let __writer = new __BinaryWriter(1024);
    DeleteDecor.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_decor", __argsBuffer, this.setCallReducerFlags.deleteDecorFlags);
  }

  onDeleteDecor(callback: (ctx: ReducerEventContext, decorId: bigint) => void) {
    this.connection.onReducer("delete_decor", callback);
  }

  removeOnDeleteDecor(callback: (ctx: ReducerEventContext, decorId: bigint) => void) {
    this.connection.offReducer("delete_decor", callback);
  }

  enterDoor() {
    this.connection.callReducer("enter_door", new Uint8Array(0), this.setCallReducerFlags.enterDoorFlags);
  }

  onEnterDoor(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("enter_door", callback);
  }

  removeOnEnterDoor(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("enter_door", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  likeDoor(doorId: bigint) {
    const __args = { doorId };
    let __writer = new __BinaryWriter(1024);
    LikeDoor.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("like_door", __argsBuffer, this.setCallReducerFlags.likeDoorFlags);
  }

  onLikeDoor(callback: (ctx: ReducerEventContext, doorId: bigint) => void) {
    this.connection.onReducer("like_door", callback);
  }

  removeOnLikeDoor(callback: (ctx: ReducerEventContext, doorId: bigint) => void) {
    this.connection.offReducer("like_door", callback);
  }

  moveDecor(decorId: bigint, x: number, y: number, rot: number) {
    const __args = { decorId, x, y, rot };
    let __writer = new __BinaryWriter(1024);
    MoveDecor.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_decor", __argsBuffer, this.setCallReducerFlags.moveDecorFlags);
  }

  onMoveDecor(callback: (ctx: ReducerEventContext, decorId: bigint, x: number, y: number, rot: number) => void) {
    this.connection.onReducer("move_decor", callback);
  }

  removeOnMoveDecor(callback: (ctx: ReducerEventContext, decorId: bigint, x: number, y: number, rot: number) => void) {
    this.connection.offReducer("move_decor", callback);
  }

  openPackage(packageId: bigint) {
    const __args = { packageId };
    let __writer = new __BinaryWriter(1024);
    OpenPackage.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("open_package", __argsBuffer, this.setCallReducerFlags.openPackageFlags);
  }

  onOpenPackage(callback: (ctx: ReducerEventContext, packageId: bigint) => void) {
    this.connection.onReducer("open_package", callback);
  }

  removeOnOpenPackage(callback: (ctx: ReducerEventContext, packageId: bigint) => void) {
    this.connection.offReducer("open_package", callback);
  }

  updateDecorText(decorId: bigint, text: string) {
    const __args = { decorId, text };
    let __writer = new __BinaryWriter(1024);
    UpdateDecorText.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_decor_text", __argsBuffer, this.setCallReducerFlags.updateDecorTextFlags);
  }

  onUpdateDecorText(callback: (ctx: ReducerEventContext, decorId: bigint, text: string) => void) {
    this.connection.onReducer("update_decor_text", callback);
  }

  removeOnUpdateDecorText(callback: (ctx: ReducerEventContext, decorId: bigint, text: string) => void) {
    this.connection.offReducer("update_decor_text", callback);
  }

}

export class SetReducerFlags {
  createDecorFlags: __CallReducerFlags = 'FullUpdate';
  createDecor(flags: __CallReducerFlags) {
    this.createDecorFlags = flags;
  }

  deleteDecorFlags: __CallReducerFlags = 'FullUpdate';
  deleteDecor(flags: __CallReducerFlags) {
    this.deleteDecorFlags = flags;
  }

  enterDoorFlags: __CallReducerFlags = 'FullUpdate';
  enterDoor(flags: __CallReducerFlags) {
    this.enterDoorFlags = flags;
  }

  likeDoorFlags: __CallReducerFlags = 'FullUpdate';
  likeDoor(flags: __CallReducerFlags) {
    this.likeDoorFlags = flags;
  }

  moveDecorFlags: __CallReducerFlags = 'FullUpdate';
  moveDecor(flags: __CallReducerFlags) {
    this.moveDecorFlags = flags;
  }

  openPackageFlags: __CallReducerFlags = 'FullUpdate';
  openPackage(flags: __CallReducerFlags) {
    this.openPackageFlags = flags;
  }

  updateDecorTextFlags: __CallReducerFlags = 'FullUpdate';
  updateDecorText(flags: __CallReducerFlags) {
    this.updateDecorTextFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get decor(): DecorTableHandle {
    // clientCache is a private property
    return new DecorTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Decor>(REMOTE_MODULE.tables.decor));
  }

  get door(): DoorTableHandle {
    // clientCache is a private property
    return new DoorTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Door>(REMOTE_MODULE.tables.door));
  }

  get doorVisit(): DoorVisitTableHandle {
    // clientCache is a private property
    return new DoorVisitTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<DoorVisit>(REMOTE_MODULE.tables.door_visit));
  }

  get interaction(): InteractionTableHandle {
    // clientCache is a private property
    return new InteractionTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Interaction>(REMOTE_MODULE.tables.interaction));
  }

  get inventory(): InventoryTableHandle {
    // clientCache is a private property
    return new InventoryTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Inventory>(REMOTE_MODULE.tables.inventory));
  }

  get package(): PackageTableHandle {
    // clientCache is a private property
    return new PackageTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Package>(REMOTE_MODULE.tables.package));
  }

  get packageItem(): PackageItemTableHandle {
    // clientCache is a private property
    return new PackageItemTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<PackageItem>(REMOTE_MODULE.tables.package_item));
  }

  get user(): UserTableHandle {
    // clientCache is a private property
    return new UserTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
